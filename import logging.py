import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import asyncio

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
API_TOKEN = '7640871011:AAEbt9QMexrfIgV7Yfv2EMPWX2Rk7RzBihE'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–ª–æ–≤–∞—Ä—å)
user_data = {}

# –ö–Ω–æ–ø–∫–∞ —Ñ–∞—Ä–º–∞
farm_button = InlineKeyboardMarkup(row_width=1)
farm_button.add(InlineKeyboardButton("üöÄ –§–∞—Ä–º–∏—Ç—å MPUP", callback_data='farm'))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'balance': 0}
    await message.answer("üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MOONPUP FARM! –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Ñ–∞—Ä–º–∏—Ç—å MPUP!", reply_markup=farm_button)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ñ–∞—Ä–º–∞
@dp.callback_query_handler(lambda c: c.data == 'farm')
async def process_farm(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data[user_id]['balance'] += 1  # +1 MPUP –∑–∞ –∫–ª–∏–∫
    await bot.answer_callback_query(callback_query.id, text=f"üí∞ –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª 1 MPUP! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} MPUP")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
@dp.message_handler(commands=['balance'])
async def check_balance(message: types.Message):
    user_id = message.from_user.id
    balance = user_data.get(user_id, {'balance': 0})['balance']
    await message.answer(f"ü™ô –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} MPUP")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
